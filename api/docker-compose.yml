version: '3.8'

services:
  # API FastAPI
  api:
    build: .
    container_name: cleaning_tracker_api
    ports:
      - "8000:8000"
    env_file:
      - .env.prod # Fichier par défaut pour production
    environment:
      - REDIS_URL=redis://redis:6379/0 # Override pour Docker
    volumes:
      - ./logs:/app/logs
    depends_on:
      - redis
    restart: unless-stopped
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 4
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Worker Celery
  celery_worker:
    build: .
    container_name: cleaning_tracker_celery_worker
    env_file:
      - .env.prod # Fichier par défaut pour production
    environment:
      - REDIS_URL=redis://redis:6379/0 # Override pour Docker
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
    volumes:
      - ./logs:/app/logs
    depends_on:
      - redis
    restart: unless-stopped
    command: celery -A app.core.celery_app worker --loglevel=info --concurrency=2
    healthcheck:
      test: [ "CMD", "celery", "-A", "app.core.celery_app", "inspect", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Planificateur Celery Beat
  celery_beat:
    build: .
    container_name: cleaning_tracker_celery_beat
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SECRET_KEY=${SECRET_KEY}
      - REDIS_URL=redis://redis:6379/0
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SERVICE_ROLE_KEY=${SERVICE_ROLE_KEY}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
    volumes:
      - ./logs:/app/logs
    depends_on:
      - redis
    restart: unless-stopped
    command: celery -A app.core.celery_app beat --loglevel=info
    healthcheck:
      test: [ "CMD", "test", "-f", "/tmp/celerybeat.pid" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis pour Celery broker/backend
  redis:
    image: redis:7-alpine
    container_name: cleaning_tracker_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3

  # Monitoring avec Redis Commander (optionnel, pour debug)
  redis_commander:
    image: rediscommander/redis-commander:latest
    container_name: cleaning_tracker_redis_commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    restart: unless-stopped
    profiles:
      - debug

volumes:
  redis_data:


networks:
  default:
    name: cleaning_tracker_network
