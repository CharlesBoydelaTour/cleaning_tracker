# =============================================================================
# CLEANING TRACKER API - Makefile
# =============================================================================

.PHONY: help install dev staging prod clean test lint format docker-build

# Variables
PYTHON := uv run python
PIP := uv
PYTEST := uv run pytest
DOCKER_COMPOSE := docker-compose

# Couleurs pour l'affichage
GREEN := \033[32m
YELLOW := \033[33m
RED := \033[31m
BLUE := \033[34m
RESET := \033[0m

# Aide par d√©faut
help: ## Affiche cette aide
	@echo "$(BLUE)üßπ Cleaning Tracker API - Commandes disponibles$(RESET)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(GREEN)%-20s$(RESET) %s\n", $$1, $$2}'

# =============================================================================
# INSTALLATION ET DEPENDENCIES
# =============================================================================

install: ## Installe toutes les d√©pendances
	@echo "$(YELLOW)üì¶ Installation des d√©pendances...$(RESET)"
	$(PIP) sync

install-dev: ## Installe les d√©pendances de d√©veloppement
	@echo "$(YELLOW)üì¶ Installation des d√©pendances de d√©veloppement...$(RESET)"
	$(PIP) sync --dev

# =============================================================================
# D√âVELOPPEMENT
# =============================================================================

dev: ## Lance l'API en mode d√©veloppement local
	@echo "$(GREEN)üöÄ D√©marrage en mode d√©veloppement local...$(RESET)"
	@chmod +x scripts/start-dev.sh
	@./scripts/start-dev.sh
	
dev-worker: ## Lance le worker Celery en mode d√©veloppement
	@echo "$(GREEN)üë∑ D√©marrage du worker Celery...$(RESET)"
	@export ENVIRONMENT=development && $(PYTHON) -m celery -A app.core.celery_app worker --loglevel=debug

# =============================================================================
# STAGING (Docker local)
# =============================================================================

staging: ## Lance l'application en mode staging avec Docker
	@echo "$(GREEN)üê≥ D√©marrage en mode staging (Docker)...$(RESET)"
	@chmod +x scripts/start-staging.sh
	@./scripts/start-staging.sh

staging-logs: ## Affiche les logs en mode staging
	@$(DOCKER_COMPOSE) -f docker-compose.dev.yml logs -f

staging-stop: ## Arr√™te les services staging
	@echo "$(RED)üõë Arr√™t des services staging...$(RESET)"
	@$(DOCKER_COMPOSE) -f docker-compose.dev.yml down

# =============================================================================
# PRODUCTION
# =============================================================================

prod: ## Lance l'application en mode production
	@echo "$(GREEN)üåç D√©marrage en mode production...$(RESET)"
	@chmod +x scripts/start-prod.sh
	@./scripts/start-prod.sh

prod-logs: ## Affiche les logs en mode production
	@$(DOCKER_COMPOSE) logs -f

prod-stop: ## Arr√™te les services production
	@echo "$(RED)üõë Arr√™t des services production...$(RESET)"
	@$(DOCKER_COMPOSE) down

# =============================================================================
# TESTS
# =============================================================================

test: ## Lance tous les tests
	@echo "$(YELLOW)üß™ Lancement des tests...$(RESET)"
	@export ENVIRONMENT=development && $(PYTEST) -v

test-fast: ## Lance les tests rapides uniquement
	@echo "$(YELLOW)‚ö° Tests rapides...$(RESET)"
	@export ENVIRONMENT=development && $(PYTEST) -v -m "not slow"

test-coverage: ## Lance les tests avec coverage
	@echo "$(YELLOW)üìä Tests avec coverage...$(RESET)"
	@export ENVIRONMENT=development && $(PYTEST) --cov=app --cov-report=html --cov-report=term

# =============================================================================
# QUALIT√â DU CODE
# =============================================================================

lint: ## V√©rifie le style du code avec ruff
	@echo "$(YELLOW)üîç V√©rification du style...$(RESET)"
	@$(PIP) run ruff check .

format: ## Formate le code avec ruff
	@echo "$(YELLOW)‚ú® Formatage du code...$(RESET)"
	@$(PIP) run ruff format .
	@$(PIP) run ruff check --fix .

# =============================================================================
# DOCKER
# =============================================================================

docker-build: ## Construit l'image Docker
	@echo "$(YELLOW)üê≥ Construction de l'image Docker...$(RESET)"
	@docker build -t cleaning-tracker-api .

docker-clean: ## Nettoie les images Docker inutilis√©es
	@echo "$(YELLOW)üßπ Nettoyage Docker...$(RESET)"
	@docker system prune -f

# =============================================================================
# UTILITAIRES
# =============================================================================

clean: ## Nettoie les fichiers temporaires
	@echo "$(YELLOW)üßπ Nettoyage...$(RESET)"
	@find . -type f -name "*.pyc" -delete
	@find . -type d -name "__pycache__" -delete
	@rm -rf .pytest_cache
	@rm -rf .ruff_cache
	@rm -rf htmlcov

env-check: ## V√©rifie la configuration d'environnement
	@echo "$(BLUE)üîß V√©rification de l'environnement...$(RESET)"
	@echo "ENVIRONMENT: $${ENVIRONMENT:-development}"
	@echo "Fichiers .env disponibles:"
	@ls -la .env* 2>/dev/null || echo "Aucun fichier .env trouv√©"

logs: ## Affiche les logs de l'application
	@echo "$(BLUE)üìÑ Logs de l'application...$(RESET)"
	@tail -f logs/app.log

# =============================================================================
# MIGRATION ET BASE DE DONN√âES
# =============================================================================

db-test: ## Test la connexion √† la base de donn√©es
	@echo "$(YELLOW)üóÑÔ∏è  Test de connexion √† la base...$(RESET)"
	@export ENVIRONMENT=development && $(PYTHON) scripts/test_db_connection.py

# Par d√©faut, affiche l'aide
.DEFAULT_GOAL := help
