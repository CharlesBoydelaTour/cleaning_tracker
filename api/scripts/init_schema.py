#!/usr/bin/env python
"""
Script pour initialiser le sch√©ma de base de donn√©es PostgreSQL
"""

import asyncio
import sys
import os

# Ajoutez le r√©pertoire parent au chemin pour que Python puisse trouver le package app
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.core.database import init_db_pool


async def create_schema():
    """Cr√©e toutes les tables n√©cessaires pour l'application."""
    print("Initialisation du pool de connexions √† la base de donn√©es...")
    try:
        pool = await init_db_pool()
        print("‚úÖ Pool de connexions initialis√© avec succ√®s.")

        async with pool.acquire() as conn:
            print("üîß Cr√©ation du sch√©ma de base de donn√©es...")
            
            # Table des utilisateurs
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                    email VARCHAR(255) UNIQUE NOT NULL,
                    hashed_password VARCHAR(255) NOT NULL,
                    created_at TIMESTAMP DEFAULT NOW(),
                    updated_at TIMESTAMP DEFAULT NOW()
                )
            """)
            print("‚úÖ Table 'users' cr√©√©e.")

            # Table des m√©nages
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS households (
                    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                    name VARCHAR(255) NOT NULL,
                    created_at TIMESTAMP DEFAULT NOW(),
                    updated_at TIMESTAMP DEFAULT NOW()
                )
            """)
            print("‚úÖ Table 'households' cr√©√©e.")

            # Table des membres de m√©nage
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS household_members (
                    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                    household_id UUID NOT NULL REFERENCES households(id) ON DELETE CASCADE,
                    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                    role VARCHAR(50) NOT NULL DEFAULT 'member',
                    joined_at TIMESTAMP DEFAULT NOW(),
                    UNIQUE(household_id, user_id)
                )
            """)
            print("‚úÖ Table 'household_members' cr√©√©e.")

            # Table des pi√®ces
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS rooms (
                    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                    name VARCHAR(255) NOT NULL,
                    household_id UUID NOT NULL REFERENCES households(id) ON DELETE CASCADE,
                    icon VARCHAR(10),
                    created_at TIMESTAMP DEFAULT NOW(),
                    updated_at TIMESTAMP DEFAULT NOW()
                )
            """)
            print("‚úÖ Table 'rooms' cr√©√©e.")

            # Table des t√¢ches
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS tasks (
                    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                    title VARCHAR(255) NOT NULL,
                    description TEXT,
                    household_id UUID NOT NULL REFERENCES households(id) ON DELETE CASCADE,
                    room_id UUID REFERENCES rooms(id) ON DELETE SET NULL,
                    assigned_to UUID REFERENCES users(id) ON DELETE SET NULL,
                    due_date TIMESTAMP,
                    completed BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT NOW(),
                    updated_at TIMESTAMP DEFAULT NOW()
                )
            """)
            print("‚úÖ Table 'tasks' cr√©√©e.")

            # Cr√©er des index pour am√©liorer les performances
            await conn.execute("CREATE INDEX IF NOT EXISTS idx_household_members_household_id ON household_members(household_id)")
            await conn.execute("CREATE INDEX IF NOT EXISTS idx_household_members_user_id ON household_members(user_id)")
            await conn.execute("CREATE INDEX IF NOT EXISTS idx_rooms_household_id ON rooms(household_id)")
            await conn.execute("CREATE INDEX IF NOT EXISTS idx_tasks_household_id ON tasks(household_id)")
            await conn.execute("CREATE INDEX IF NOT EXISTS idx_tasks_room_id ON tasks(room_id)")
            await conn.execute("CREATE INDEX IF NOT EXISTS idx_tasks_assigned_to ON tasks(assigned_to)")
            print("‚úÖ Index cr√©√©s.")

        # Fermeture du pool de connexions
        await pool.close()
        print("‚úÖ Pool de connexions ferm√©.")
        print("üéâ Sch√©ma de base de donn√©es cr√©√© avec succ√®s!")

        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation du sch√©ma: {e}")
        return False


if __name__ == "__main__":
    success = asyncio.run(create_schema())
    if success:
        print("‚úÖ Initialisation du sch√©ma r√©ussie!")
        sys.exit(0)
    else:
        print("‚ùå √âchec de l'initialisation du sch√©ma.")
        sys.exit(1)
